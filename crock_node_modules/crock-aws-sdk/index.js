const AWS = require('real-aws-sdk');

const bastardised=AWS
bastardised.isBroughtToYouBy="CrockStack";
bastardised.superLambda=bastardised.Lambda;
class UnderLambda {
    constructor(params) {
        //super(params);
        var aLambda=new bastardised.superLambda(params);
        Object.assign(this, aLambda);
    }
    invoke(params) {
        let lambdaToInvoke=stack.Resources[params.FunctionName];
        console.log("Not yet implemented. This is where we'll call up to the stack to execute another lambda", lambdaToInvoke);
    }
}
bastardised.superApiGatewayManagementApi=bastardised.ApiGatewayManagementApi;
class UnderApiGatewayManagementApi {
    /*
    The real ApiGatewayManagementApi is quite simple - it exposes three functions for managing
    websocket connections. Ours do the same thing. There's a dictionary of connections in
    a global object called stack (there's really no avoiding a global for this). The dictionary
    is called webSocketConnections, and it looks like this
    {
        ad2x-4Dde-De09-cIx1: connection,
        8DvV-6n83-txX5-elL8: connection
    }
    The connection is a websocket implementation capable of sending and receiving messages
    */
    constructor(params) {
        var aApiGatewayManagementApi=new bastardised.superApiGatewayManagementApi(params);
        Object.assign(this, aApiGatewayManagementApi);
    }
    postToConnection(params) {
        //Params will look like this { ConnectionId: connectionId, Data: postData }
        //We want to find the connection corresponding to the ID, and send it the data
        //We need to return a promise capable of rejecting with an error which has a statusCode
    }
    getConnection(params) {
        //Do we need to implement this?
        //{ ConnectionId: connectionId }
        //It's probably easily done - we just need to get the connection from the dictionary of connections
        //and return an object that looks like this
        //{ConnectedAt: '2020-07-16T19:20:30.45+01:00',
        //  Identity: {
        //      SourceIp: '192.169.0.50',
        //      UserAgent: 'Mozilla v12.0'
        //  }
        //  LastActiveAt: '2020-07-16T19:20:30.45+01:00'
        //}
    }
    deleteConnection(params) {
        //{ ConnectionId: connectionId }
        //Presumably we have to just remove it from the dictionary of connections
    }
}

bastardised.Lambda=UnderLambda

module.exports=bastardised;

